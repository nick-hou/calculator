{"version":3,"sources":["features/calc/calcSlice.js","features/calc/Calculator.js","Footer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["calcSlice","createSlice","name","initialState","queue","status","reducers","pressKey","state","action","keyPressed","payload","stage","stageText","test","substr","length","concat","split","actions","Calculator","dispatch","useDispatch","useState","setStageText","queueText","useSelector","calculator","clickOper","e","target","innerText","eq","console","log","soln","evaluate","clickNum","includes","KeyPressed","queueDisplay","id","className","onClick","Footer","href","App","store","configureStore","reducer","calcReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c908a6a0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  queue: '',\r\n  status: 'inwork'\r\n};\r\n\r\nexport const calcSlice = createSlice({\r\n  name: 'calculator',\r\n  initialState,\r\n  reducers: {\r\n    pressKey: (state, action) => {\r\n      const keyPressed = action.payload.keyPressed;\r\n      const stage = action.payload.stageText;\r\n      switch (keyPressed) {\r\n        // For /*-+, if the stage contains a number, push the stage and operation to the queue.\r\n        // If the stage is already an operation, replace the last char in the queue with the new operation\r\n        case '/':\r\n        case '*':\r\n        case '+':\r\n        case '-':\r\n          if(state.status === 'solved') {\r\n            state.queue = '';\r\n            state.status = 'inwork'\r\n          }\r\n          if(/[/*+-]/.test(stage)) {\r\n            state.queue = state.queue.substr(0, state.queue.length-1).concat(keyPressed);\r\n          } else {\r\n            state.queue = state.queue.concat(stage).concat(keyPressed);\r\n          }\r\n          break;\r\n        // For AC, clear the queue\r\n        case 'AC':\r\n          state.status = 'inwork';\r\n          state.queue = '';\r\n          break;\r\n        // For =, push '=' to the queue and update state's solution\r\n        case '=':\r\n          // Yes, we do the regex check here twice, once in the component and again in the store. But this allows us to only write \"dispatch(keyPressed)\" once instead of for every switch case.\r\n          if(state.status === 'inwork' && !(/[/*+-]/.test(stage.split(-1)))) {\r\n            state.status = 'solved';\r\n            state.queue = state.queue.concat(stage + '=')\r\n            break;\r\n          }\r\n          break;\r\n        default:\r\n          if(state.status === 'solved') state.queue = ''\r\n          state.status = 'inwork'\r\n          break;\r\n      }\r\n      return state;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { pressKey } = calcSlice.actions;\r\n\r\n// export const select= (state) => state.;\r\n\r\n\r\nexport default calcSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  pressKey\r\n} from './calcSlice';\r\nimport { evaluate } from 'mathjs'\r\nimport './Calculator.css';\r\n\r\nexport function Calculator() {\r\n  const dispatch = useDispatch();\r\n\r\n  // We separate our logic into a queue and a stage.\r\n  // Intuitively, the stage contains whatever you would see on the second row of the display - i.e., only the current number you're typing out, or the last operator you clicked.\r\n  // Because this will change frequently, and we need to inspect the data before inserting it into our equation, this is held in local state.\r\n  // The queue contains the entire equation that needs to be solved, and will be stored in the Redux store.\r\n  const [stageText, setStageText] = useState('0')\r\n  const queueText = useSelector(state => state.calculator.queue)\r\n  const status = useSelector(state => state.calculator.status)\r\n\r\n  // An operator button is anything that requires a push to the queue - equals, all-clear, or any math operators.\r\n  const clickOper = e => {\r\n    const keyPressed = e.target.innerText\r\n    // Dispatch keypress to update the equation in queue\r\n    dispatch(pressKey({keyPressed, stageText}))\r\n    // Update the stage based on the key pressed\r\n    switch (keyPressed) {\r\n      // For /*-+, display that on the stage\r\n      case '/':\r\n      case '*':\r\n      case '+':\r\n      case '-':\r\n        setStageText(keyPressed);\r\n        break;\r\n      // For AC, clear the stage\r\n      case 'AC':\r\n        setStageText('0');\r\n        break;\r\n      // For =,\r\n      case '=':\r\n        // Check for a valid equation, i.e. doesn't end with an operator\r\n        if(status==='inwork' && !(/[/*+-]/.test(stageText.split(-1)))) {\r\n          // So.. this only barely works. Since dispatch is async-ish, if the browser runs fast enough, the queueText hasn't updated before it gets to this line.\r\n          // Ideally, I would know how to write an await and .then() to only run evaluate /after/ the state is updated.\r\n          const eq = queueText + stageText\r\n          console.log(eq)\r\n          const soln = evaluate(eq)\r\n          setStageText(soln);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // A \"number\" button is anything that gets handled locally in the stage - digits, decimal pt, or local clear\r\n  const clickNum = e => {\r\n    const keyPressed = e.target.innerText\r\n    switch (keyPressed) {\r\n      case 'C':\r\n        setStageText('0');\r\n        // If we click C after solving an equation, clear all\r\n        if(status === 'solved') dispatch(pressKey({keyPressed: 'AC'}))\r\n        break;\r\n      case '.':\r\n        if(status === 'solved') {\r\n          // If we just solved an equation, start a new one with 0.xx\r\n          dispatch(pressKey({keyPressed: 'AC'}))\r\n          setStageText('0.')\r\n        }\r\n        else if (!stageText.includes('.')) {\r\n          // If not solved, check for an existing decimal in the stage\r\n          setStageText(stageText + '.')\r\n        }\r\n        break;\r\n      case '0':\r\n        if(status === 'solved') {\r\n          // If we just solved an equation, start a new one with 0.xx\r\n          dispatch(pressKey({keyPressed: 'AC'}))\r\n          setStageText('0')\r\n        }\r\n        else if(stageText !== '0') {\r\n          setStageText(stageText + '0')\r\n        }\r\n        break;\r\n      case '1':\r\n      case '2':\r\n      case '3':\r\n      case '4':\r\n      case '5':\r\n      case '6':\r\n      case '7':\r\n      case '8':\r\n      case '9':\r\n        if(stageText === '0') {\r\n          // If stage says 0, replace it with the new digit\r\n          setStageText(keyPressed)\r\n        } else if(/[/*+-]/.test(stageText)) {\r\n          // If we last pressed an operator, replace the stage with the new text\r\n          setStageText(keyPressed)\r\n        } else if (status === 'solved') {\r\n          // If we just solved an equation, clear the board. Equivalent to pressing AC\r\n          dispatch(pressKey({KeyPressed: 'AC'}))\r\n          setStageText(keyPressed)\r\n        } else {\r\n          // Otherwise, just push the digit\r\n          setStageText(stageText + keyPressed);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Create a variable to show in the top display bar. Since the redux store doesn't update until we dispatch an operation, we need to add what's in the staging area to that display - but not if it's an operation, or if we just hit =\r\n  let queueDisplay = queueText + (/[/*+-]/.test(stageText) ? '' : stageText)\r\n\r\n  return (\r\n    <div id=\"calculator\">\r\n      <div className=\"gridContainer\">\r\n        <div className=\"display\" id=\"queue\">{queueDisplay}</div>\r\n        <div className=\"display\" id=\"stage\">{stageText}</div>\r\n        <div className=\"gridItem\" id=\"btn1\" onClick={clickNum}>1</div>\r\n        <div className=\"gridItem\" id=\"btn2\" onClick={clickNum}>2</div>\r\n        <div className=\"gridItem\" id=\"btn3\" onClick={clickNum}>3</div>\r\n        <div className=\"gridItem\" id=\"btn4\" onClick={clickNum}>4</div>\r\n        <div className=\"gridItem\" id=\"btn5\" onClick={clickNum}>5</div>\r\n        <div className=\"gridItem\" id=\"btn6\" onClick={clickNum}>6</div>\r\n        <div className=\"gridItem\" id=\"btn7\" onClick={clickNum}>7</div>\r\n        <div className=\"gridItem\" id=\"btn8\" onClick={clickNum}>8</div>\r\n        <div className=\"gridItem\" id=\"btn9\" onClick={clickNum}>9</div>\r\n        <div className=\"gridItem\" id=\"btn0\" onClick={clickNum}>0</div>\r\n        <div className=\"gridItem\" id=\"btnDec\" onClick={clickNum}>.</div>\r\n        <div className=\"gridItem\" id=\"btnC\" onClick={clickNum}>C</div>\r\n        <div className=\"gridItem\" id=\"btnAC\" onClick={clickOper}>AC</div>\r\n        <div className=\"gridItem\" id=\"btnPls\" onClick={clickOper}>+</div>\r\n        <div className=\"gridItem\" id=\"btnMin\" onClick={clickOper}>-</div>\r\n        <div className=\"gridItem\" id=\"btnMul\" onClick={clickOper}>*</div>\r\n        <div className=\"gridItem\" id=\"btnDiv\" onClick={clickOper}>/</div>\r\n        <div className=\"gridItem\" id=\"btnEql\" onClick={clickOper}>=</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <div>\r\n      Built by <a target=\"blank\" href=\"https://nicholashou.com\">Nick Hou</a>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Calculator } from './features/calc/Calculator';\r\nimport { Footer } from './Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport calcReducer from '../features/calc/calcSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    calculator: calcReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}